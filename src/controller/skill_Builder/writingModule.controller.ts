import OpenAI from "openai";
import { Request, Response } from 'express';
import { ModuleModel } from "../../model/module.model";
import { FeedbackInput } from "../builder.controller";
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY! });

export const getWritingTaskLogic = async (
  req: Request
): Promise<{ moduleId: string }> => {
const { topic, level, formality, writingType = 'defaultWritingType', createdBy, language = 'german' } = req.body;


  const prompt = `
You are an experienced language teacher. Create a writing task for a language learner at the "${level}" level.

Learner's preferences:
- Topic: ${topic}
- Formality: ${formality}
- Writing type: ${writingType}

The task should require a response of approximately 120–180 words (unless a different length is expected for the writing type).

⚠️ The task and topic must be written **strictly in ${language}** — do not use English or any other language. No explanations, no translations.

Respond strictly in the following JSON format:

{
  "topic": "<Topic in ${language}>",
  "task": "<Detailed writing task in ${language}>"
}
`.trim();

  let completion;
  try {
    completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      // temperature: 0.7,
      messages: [
        {
          role: 'system',
          content: `You are a helpful assistant that creates writing tasks for language learners. Respond strictly in ${language}.`,
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
    });
  } catch (err) {
    console.error('OpenAI error:', err);
    throw new Error('Failed to generate writing task.');
  }

  const content = completion.choices[0]?.message?.content?.trim() || '';

  let aiData;
  try {
    aiData = JSON.parse(content);
  } catch (e) {
    console.error('Invalid JSON from OpenAI:', content);
    throw new Error('OpenAI returned invalid JSON.');
  }

  const newModule = await ModuleModel.create({
    type: 'writing',
    task: aiData.task,
    paragraph: '',
    aiFeedback: null,
    createdBy,
  });

  return { moduleId: newModule._id.toString() };
};





export const generateWritingFeedbackHelper = async (
  input: FeedbackInput
): Promise<{ feedback: any; moduleId: string }> => {
  const { moduleId, paragraph ,language} = input;

  if (!moduleId || !paragraph) {
    throw new Error('Missing required fields: moduleId or paragraph.');
  }

  const module = await ModuleModel.findById(moduleId);
  if (!module || module.type !== 'writing') {
    throw new Error('Writing module not found.');
  }

  const { task } = module;
  if (!task) {
    throw new Error('Module does not contain a writing task.');
  }

  const prompt = `
You are a professional ${language} an writing evaluator.

A student has submitted a written paragraph for the following writing task. Your job is to evaluate and provide constructive feedback.

### Writing Task:
${task}

### Student Paragraph:
${paragraph}

Return the result STRICTLY as a JSON object with the following format:
{
  "Gesamtnote": "4/5 (Gut)",
  "Evaluation": {
    "Grammatik": "Correct sentence structure overall, with some verb agreement issues.",
    "Wortschatz": "Varied and appropriate vocabulary, though some repetition noticed.",
    "Satzstruktur": "Good variety of sentence forms, but could improve transitions.",
    "Response Relevance": "The content is on-topic and answers the task well."
  },
  "Tips": [
    "Work on more cohesive sentence connectors.",
    "Try to avoid repeating common nouns.",
    "Review verb tenses in complex sentences."
  ]
}

DO NOT include explanations, formatting, or anything outside the JSON object.
`.trim();

  const completion = await openai.chat.completions.create({
    model: "gpt-4o-mini",
    // temperature: 0.7,
    messages: [
      {
        role: 'system',
        content: 'You are a structured and formal evaluator for ${language} writing tasks. Respond only in strict JSON.',
      },
      {
        role: 'user',
        content: prompt,
      },
    ],
  });

  const aiResponse = completion.choices[0]?.message?.content?.trim();
  if (!aiResponse) {
    throw new Error('No feedback generated by AI.');
  }

  let feedback;
  try {
    feedback = JSON.parse(aiResponse);
  } catch (err) {
    console.error('Invalid JSON from OpenAI:', aiResponse);
    throw new Error('Invalid JSON returned by AI.');
  }

  module.paragraph = paragraph;
  module.aiFeedback = feedback;
  await module.save();

  return {
    moduleId: module._id.toString(),
    feedback,
  };
};